--output faultDetection

--robots
 	classname=AquaticDrone,
	description=drone,
	distancewheels=.2,
	color=cyan,
	radius=.2,
	sensors=(
		CompassSensor=(
			classname=simulation.robot.sensors.CompassSensor,
			id=1
		),
		PositionSensor=(
			classname=simulation.robot.sensors.PositionSensor,
			id=2
		),
		WaypointSensor=(
			classname=simulation.robot.sensors.WaypointSensor,
			range=3,
			id=3
		),
		MotorsVelocitySensor=(
			classname=simulation.robot.sensors.MotorsVelocitySensor,
			id=4
		)
	),
	actuators=(
		TwoWheelActuator_1=(
			classname=simulation.robot.actuators.TwoWheelActuator,
			maxspeed=1,
			id=1
		),
		RobotColorActuator_1=(
			classname=simulation.robot.actuators.RobotColorActuator,
			id=2
		)
	)

--controllers
	classname=evolutionaryrobotics.neuralnetworks.AquaticHibridNeuralNetworkController,
	network=(
		classname=CTRNNMultilayer,
		inputs=(
			SensorNNInput=(classname=SensorNNInput,id=1),
			PositionNNInput=(classname=PositionNNInput,id=2),
			WaypointNNInput=(classname=WaypointNNInput,id=3),
			MotorsVelocityNNInput=(classname=MotorsVelocityNNInput,id=4)
		),
		outputs=(
			RobotColorNNOutput=(classname=RobotColorNNOutput,id=2)
		)
	)
	
--population
 	classname=MuLambdaPopulation,
	size=100,
	samples=10,
	generations=5,
	mutationrate=.1

--environment
 	classname=MyMaritimeMissionEnvironment,
	steps=1000,
	width=10,
	height=10,
	randomWP=1,
	constantWPQnt=1,
	headingLine=1

--executor classname=taskexecutor.ConillonTaskExecutor


--evolution classname=evolutionaryrobotics.evolution.GenerationalEvolution

--evaluation classname=evolutionaryrobotics.evaluationfunctions.EmptyEvaluationFunction

--random-seed 1