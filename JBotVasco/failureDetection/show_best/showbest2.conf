--environment
	classname=simulation.environment.MyMaritimeMissionEnvironment,
	steps=1000,
	width=10,
	height=10,
	randomWP=1,
	constantWPQnt=1,
	headingLine=1
--executor
	classname=taskexecutor.ConillonTaskExecutor
--evaluation
	classname=evolutionaryrobotics.evaluationfunctions.EmptyEvaluationFunction
--random-seed
	1
--controllers
	classname=evolutionaryrobotics.neuralnetworks.AquaticHibridNeuralNetworkController,
	network=(
		classname=evolutionaryrobotics.neuralnetworks.CTRNNMultilayer,
		inputs=(
			SensorNNInput=(
				classname=evolutionaryrobotics.neuralnetworks.inputs.SensorNNInput,
				id=1
			),
			PositionNNInput=(
				classname=evolutionaryrobotics.neuralnetworks.inputs.PositionNNInput,
				id=2
			),
			WaypointNNInput=(
				classname=evolutionaryrobotics.neuralnetworks.inputs.WaypointNNInput,
				id=3
			),
			MotorsVelocityNNInput=(
				classname=evolutionaryrobotics.neuralnetworks.inputs.MotorsVelocityNNInput,
				id=4
			)
		),
		outputs=(
			RobotColorNNOutput=(
				classname=evolutionaryrobotics.neuralnetworks.outputs.RobotColorNNOutput,
				id=2
			)
		)
	)
--evolution
	classname=evolutionaryrobotics.evolution.GenerationalEvolution
--robots
	classname=simulation.robot.AquaticDrone,
	description=drone,
	distancewheels=.2,
	color=cyan,
	radius=.2,
	sensors=(
		CompassSensor_1=(
			classname=simulation.robot.sensors.CompassSensor,
			id=1
		),
		PositionSensor_2=(
			classname=simulation.robot.sensors.PositionSensor,
			id=2
		),
		WaypointSensor_3=(
			classname=simulation.robot.sensor.WaypointSensor,
			range=3,
			id=3
		),
		MotorsVelocitySensor_4=(
			classname=simulation.robot.sensors.MotorsVelocitySensor,
			id=4
		)
	),
	actuators=(
		TwoWheelActuator_1=(
			classname=simulation.robot.actuators.TwoWheelActuator,
			maxspeed=1,
			id=1
		),
		RobotColorActuator_2=(
			classname=simulation.robot.actuators.RobotColorActuator,
			id=2
		)
	)
--output
	failureDetection
--population load=failureDetection/populations/population2,showbest
--random-seed 1381246763
