--output faultDetection_simple_version_50prob_15324435211_eval50
--robots
 	classname=AquaticDrone,
	description=drone,
	distancewheels=.2,
	color=cyan,
	radius=.2,
	sensors=(
		CompassSensor=(
			classname=simulation.robot.sensors.HistoryCompassSensor,
			historySize=1,
			id=1
		),
		PositionSensor=(
			classname=simulation.robot.sensors.HistoryPositionSensor,
			historySize=1,
			id=2
		),
		MotorsVelocitySensor=(
			classname=simulation.robot.sensors.HistoryMotorsVelocitySensor,
			historySize=1,
			id=3
		)
	),
	actuators=(
		FaultyTwoWheelActuator=(
			classname=simulation.robot.actuators.FaultyTwoWheelActuator,
			maxspeed=.2,
			id=1
		),
		RobotColorActuator=(
			classname=simulation.robot.actuators.RobotColorActuator,
			id=2
		)
	)

--controllers
	classname=evolutionaryrobotics.neuralnetworks.HibridNeuralNetworkController,
	network=(
		classname=CTRNNMultilayer,
		inputs=(
			SensorNNInput=(classname=HistoryCompassSensorNNInput,id=1),
			PositionNNInput=(classname=HistoryPositionNNInput,id=2),
			MotorsVelocityNNInput=(classname=HistoryMotorsVelocityNNInput,id=3)
		),
		outputs=(
			RobotColorNNOutput=(classname=RobotColorNNOutput,id=2)
		),
	),
	secondclassname=evolutionaryrobotics.neuralnetworks.GoStraightController,
	failureProbability=.50
	
--population
 	classname=MuLambdaPopulation,
	size=100,
	samples=100,
	generations=300,
	mutationrate=.15

--environment
 	classname=MyMaritimeMissionEnvironment,
	steps=1000,
	width=10,
	height=10,
	drawBase=1,
	waypointQuantity=0

--executor classname=taskexecutor.ConillonTaskExecutor

--evolution classname=evolutionaryrobotics.evolution.GenerationalEvolution

--evaluation 
	classname=evolutionaryrobotics.evaluationfunctions.FaultDetectionEvaluationFunction,
	detectionMaxDelay=75,
	resetFitnessOnFailure=0,
	stopOnFailure=0

--random-seed 15324435211